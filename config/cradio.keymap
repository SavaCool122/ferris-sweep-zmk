// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 2>;
            then-layer = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        brack1 {
            bindings = <&kp RBKT>;
            key-positions = <28 27>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        brack2 {
            bindings = <&kp LBKT>;
            key-positions = <27 26>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        brack3 {
            bindings = <&kp LPAR>;
            key-positions = <17 16>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        brack4 {
            bindings = <&kp RPAR>;
            key-positions = <17 18>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <11 1>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <12 2>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <13 3>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <21 11>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <22 12>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <23 13>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        proc {
            bindings = <&kp PRCNT>;
            key-positions = <4 14>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };

        tild {
            bindings = <&kp TILDE>;
            key-positions = <14 24>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q       &kp W           &kp E        &kp R             &kp T          &kp Y      &kp U             &kp I        &kp O           &kp P
&ht LCMD A  &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G          &kp H      &ht LEFT_SHIFT J  &ht LCTRL K  &ht LEFT_ALT L  &ht LCMD SQT
&kp Z       &kp X           &kp C        &kp V             &kp B          &kp N      &kp M             &kp COMMA    &kp DOT         &qexcl
                                         &lt 1 BSPC        &lt 3 SPACE    &kp ENTER  &lt 2 ENTER
            >;
        };

        nav {
            bindings = <
&trans    &trans        &trans     &trans          &trans    &trans         &trans          &trans     &trans        &trans
&kp LGUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &kp BACKSPACE  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &trans
&trans    &none         &kp LEFT   &kp RIGHT       &trans    &kp TAB        &kp UP          &kp DOWN   &kp DELETE    &kp ENTER
                                   &trans          &trans    &trans         &trans
            >;
        };

        num {
            bindings = <
&trans            &kp N7                 &kp N8        &kp N9                   &trans    &none   &none           &none      &none         &none
&kp LC(NUMBER_0)  &ht LEFT_ALT NUMBER_4  &ht LCTRL N5  &ht LEFT_SHIFT NUMBER_6  &trans    &trans  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LGUI
&trans            &kp NUMBER_1           &kp NUMBER_2  &kp NUMBER_3             &trans    &trans  &trans          &trans     &trans        &none
                                                       &trans                   &trans    &trans  &trans
            >;
        };

        tech {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &bt BT_SEL 1    &trans  &trans  &trans  &trans  &trans
&kp F10  &kp F1  &kp F2  &kp F3  &bt BT_CLR      &trans  &trans  &trans  &trans  &trans
                         &trans  &trans          &trans  &trans
            >;
        };
    };
};
